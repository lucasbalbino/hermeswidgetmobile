package br.ufg.inf.mestrado.hermeswidget.ontologies;
/* CVS $Id: $ */
 
import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.rdf.model.*;

 
/**
 * Vocabulary definitions from √Årea de Trabalho/time.rdf 
 * @author Auto-generated by schemagen on 14 fev 2018 20:20 
 */
public class TIME {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static final OntModel M_MODEL = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.w3.org/2006/time#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     * @return namespace as String
     * @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = M_MODEL.createResource( NS );
    
    /** <p>Gives directionality to time. If a temporal entity T1 is after another temporal 
     *  entity T2, then the beginning of T1 is after the end of T2.</p>
     */
    public static final ObjectProperty after = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#after" );
    
    /** <p>Gives directionality to time. If a temporal entity T1 is before another temporal 
     *  entity T2, then the end of T1 is before the beginning of T2. Thus, "before" 
     *  can be considered to be basic to instants and derived for intervals.</p>
     */
    public static final ObjectProperty before = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#before" );
    
    /** <p>The day of week, whose value is a member of the class time:DayOfWeek</p> */
    public static final ObjectProperty dayOfWeek = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#dayOfWeek" );
    
    /** <p>Beginning of a temporal entity</p> */
    public static final ObjectProperty hasBeginning = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasBeginning" );
    
    /** <p>Value of DateTimeInterval expressed as a structured value. The beginning and 
     *  end of the interval coincide with the limits of the shortest element in the 
     *  description.</p>
     */
    public static final ObjectProperty hasDateTimeDescription = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasDateTimeDescription" );
    
    /** <p>Duration of a temporal entity, expressed as a scaled value or nominal value</p> */
    public static final ObjectProperty hasDuration = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasDuration" );
    
    /** <p>Duration of a temporal entity, expressed using a structured description</p> */
    public static final ObjectProperty hasDurationDescription = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasDurationDescription" );
    
    /** <p>End of a temporal entity.</p> */
    public static final ObjectProperty hasEnd = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasEnd" );
    
    /** <p>The temporal reference system used by a temporal position or extent description.</p> */
    public static final ObjectProperty hasTRS = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasTRS" );
    
    /** <p>Duration of a temporal entity.</p> */
    public static final ObjectProperty hasTemporalDuration = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasTemporalDuration" );
    
    /** <p>Supports the association of a temporal entity (instant or interval) to any 
     *  thing</p>
     */
    public static final ObjectProperty hasTime = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#hasTime" );
    
    /** <p>Position of an instant, expressed using a structured description</p> */
    public static final ObjectProperty inDateTime = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#inDateTime" );
    
    /** <p>Position of a time instant</p> */
    public static final ObjectProperty inTemporalPosition = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#inTemporalPosition" );
    
    /** <p>Position of an instant, expressed as a temporal coordinate or nominal value</p> */
    public static final ObjectProperty inTimePosition = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#inTimePosition" );
    
    /** <p>An instant that falls inside the interval. It is not intended to include beginnings 
     *  and ends of intervals.</p>
     */
    public static final ObjectProperty inside = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#inside" );
    
    /** <p>If a proper interval T1 is intervalAfter another proper interval T2, then 
     *  the beginning of T1 is after the end of T2.</p>
     */
    public static final ObjectProperty intervalAfter = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalAfter" );
    
    /** <p>If a proper interval T1 is intervalBefore another proper interval T2, then 
     *  the end of T1 is before the beginning of T2.</p>
     */
    public static final ObjectProperty intervalBefore = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalBefore" );
    
    /** <p>If a proper interval T1 is intervalContains another proper interval T2, then 
     *  the beginning of T1 is before the beginning of T2, and the end of T1 is after 
     *  the end of T2.</p>
     */
    public static final ObjectProperty intervalContains = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalContains" );
    
    /** <p>If a proper interval T1 is intervalDisjoint another proper interval T2, then 
     *  the beginning of T1 is after the end of T2, or the end of T1 is before the 
     *  beginning of T2, i.e. the intervals do not overlap in any way, but their ordering 
     *  relationship is not known.</p>
     */
    public static final ObjectProperty intervalDisjoint = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalDisjoint" );
    
    /** <p>If a proper interval T1 is intervalDuring another proper interval T2, then 
     *  the beginning of T1 is after the beginning of T2, and the end of T1 is before 
     *  the end of T2.</p>
     */
    public static final ObjectProperty intervalDuring = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalDuring" );
    
    /** <p>If a proper interval T1 is intervalEquals another proper interval T2, then 
     *  the beginning of T1 is coincident with the beginning of T2, and the end of 
     *  T1 is coincident with the end of T2.</p>
     */
    public static final ObjectProperty intervalEquals = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalEquals" );
    
    /** <p>If a proper interval T1 is intervalFinishedBy another proper interval T2, 
     *  then the beginning of T1 is before the beginning of T2, and the end of T1 
     *  is coincident with the end of T2.</p>
     */
    public static final ObjectProperty intervalFinishedBy = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalFinishedBy" );
    
    /** <p>If a proper interval T1 is intervalFinishes another proper interval T2, then 
     *  the beginning of T1 is after the beginning of T2, and the end of T1 is coincident 
     *  with the end of T2.</p>
     */
    public static final ObjectProperty intervalFinishes = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalFinishes" );
    
    /** <p>If a proper interval T1 is intervalIn another proper interval T2, then the 
     *  beginning of T1 is after the beginning of T2 or is coincident with the beginning 
     *  of T2, and the end of T1 is before the end of T2, or is coincident with the 
     *  end of T2, except that end of T1 may not be coincident with the end of T2 
     *  if the beginning of T1 is coincident with the beginning of T2.</p>
     */
    public static final ObjectProperty intervalIn = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalIn" );
    
    /** <p>If a proper interval T1 is intervalMeets another proper interval T2, then 
     *  the end of T1 is coincident with the beginning of T2.</p>
     */
    public static final ObjectProperty intervalMeets = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalMeets" );
    
    /** <p>If a proper interval T1 is intervalMetBy another proper interval T2, then 
     *  the beginning of T1 is coincident with the end of T2.</p>
     */
    public static final ObjectProperty intervalMetBy = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalMetBy" );
    
    /** <p>If a proper interval T1 is intervalOverlappedBy another proper interval T2, 
     *  then the beginning of T1 is after the beginning of T2, the beginning of T1 
     *  is before the end of T2, and the end of T1 is after the end of T2.</p>
     */
    public static final ObjectProperty intervalOverlappedBy = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalOverlappedBy" );
    
    /** <p>If a proper interval T1 is intervalOverlaps another proper interval T2, then 
     *  the beginning of T1 is before the beginning of T2, the end of T1 is after 
     *  the beginning of T2, and the end of T1 is before the end of T2.</p>
     */
    public static final ObjectProperty intervalOverlaps = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalOverlaps" );
    
    /** <p>If a proper interval T1 is intervalStarted another proper interval T2, then 
     *  the beginning of T1 is coincident with the beginning of T2, and the end of 
     *  T1 is after the end of T2.</p>
     */
    public static final ObjectProperty intervalStartedBy = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalStartedBy" );
    
    /** <p>If a proper interval T1 is intervalStarts another proper interval T2, then 
     *  the beginning of T1 is coincident with the beginning of T2, and the end of 
     *  T1 is before the end of T2.</p>
     */
    public static final ObjectProperty intervalStarts = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#intervalStarts" );
    
    /** <p>The month of the year, whose value is a member of the class time:MonthOfYear</p> */
    public static final ObjectProperty monthOfYear = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#monthOfYear" );
    
    /** <p>The time zone for clock elements in the temporal position</p> */
    public static final ObjectProperty timeZone = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#timeZone" );
    
    /** <p>The temporal unit which provides the precision of a date-time value or scale 
     *  of a temporal extent</p>
     */
    public static final ObjectProperty unitType = M_MODEL.createObjectProperty( "http://www.w3.org/2006/time#unitType" );
    
    /** <p>Day position in a calendar-clock system. The range of this property is not 
     *  specified, so can be replaced by any specific representation of a calendar 
     *  day from any calendar.</p>
     */
    public static final DatatypeProperty day = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#day" );
    
    /** <p>The number of the day within the year</p> */
    public static final DatatypeProperty dayOfYear = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#dayOfYear" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in days</p> */
    public static final DatatypeProperty days = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#days" );
    
    /** <p>Extent of a temporal entity, expressed using xsd:duration</p> */
    public static final DatatypeProperty hasXSDDuration = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#hasXSDDuration" );
    
    /** <p>Hour position in a calendar-clock system.</p> */
    public static final DatatypeProperty hour = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#hour" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in hours</p> */
    public static final DatatypeProperty hours = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#hours" );
    
    /** <p>Position of an instant, expressed using xsd:date</p> */
    public static final DatatypeProperty inXSDDate = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#inXSDDate" );
    
    /** <p>Position of an instant, expressed using xsd:dateTime</p> */
    public static final DatatypeProperty inXSDDateTime = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#inXSDDateTime" );
    
    /** <p>Position of an instant, expressed using xsd:dateTimeStamp</p> */
    public static final DatatypeProperty inXSDDateTimeStamp = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#inXSDDateTimeStamp" );
    
    /** <p>Position of an instant, expressed using xsd:gYear</p> */
    public static final DatatypeProperty inXSDgYear = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#inXSDgYear" );
    
    /** <p>Position of an instant, expressed using xsd:gYearMonth</p> */
    public static final DatatypeProperty inXSDgYearMonth = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#inXSDgYearMonth" );
    
    /** <p>Minute position in a calendar-clock system.</p> */
    public static final DatatypeProperty minute = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#minute" );
    
    /** <p>length, or element of, a temporal extent expressed in minutes</p> */
    public static final DatatypeProperty minutes = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#minutes" );
    
    /** <p>Month position in a calendar-clock system. The range of this property is not 
     *  specified, so can be replaced by any specific representation of a calendar 
     *  month from any calendar.</p>
     */
    public static final DatatypeProperty month = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#month" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in months</p> */
    public static final DatatypeProperty months = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#months" );
    
    /** <p>The (nominal) value indicating temporal position in an ordinal reference system</p> */
    public static final DatatypeProperty nominalPosition = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#nominalPosition" );
    
    /** <p>Value of a temporal extent expressed as a decimal number scaled by a temporal 
     *  unit</p>
     */
    public static final DatatypeProperty numericDuration = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#numericDuration" );
    
    /** <p>The (numeric) value indicating position within a temporal coordinate system</p> */
    public static final DatatypeProperty numericPosition = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#numericPosition" );
    
    /** <p>Second position in a calendar-clock system.</p> */
    public static final DatatypeProperty second = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#second" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in seconds</p> */
    public static final DatatypeProperty seconds = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#seconds" );
    
    /** <p>Week number within the year.</p> */
    public static final DatatypeProperty week = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#week" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in weeks</p> */
    public static final DatatypeProperty weeks = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#weeks" );
    
    /** <p>Value of DateTimeInterval expressed as a compact value.</p> */
    public static final DatatypeProperty xsdDateTime = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#xsdDateTime" );
    
    /** <p>Year position in a calendar-clock system. The range of this property is not 
     *  specified, so can be replaced by any specific representation of a calendar 
     *  year from any calendar.</p>
     */
    public static final DatatypeProperty year = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#year" );
    
    /** <p>length of, or element of the length of, a temporal extent expressed in years</p> */
    public static final DatatypeProperty years = M_MODEL.createDatatypeProperty( "http://www.w3.org/2006/time#years" );
    
    /** <p>Description of date and time structured with separate values for the various 
     *  elements of a calendar-clock system. The temporal reference system is fixed 
     *  to Gregorian Calendar, and the range of year, month, day properties restricted 
     *  to corresponding XML Schema types xsd:gYear, xsd:gMonth and xsd:gDay, respectively.</p>
     */
    public static final OntClass DateTimeDescription = M_MODEL.createClass( "http://www.w3.org/2006/time#DateTimeDescription" );
    
    /** <p>DateTimeInterval is a subclass of ProperInterval, defined using the multi-element 
     *  DateTimeDescription.</p>
     */
    public static final OntClass DateTimeInterval = M_MODEL.createClass( "http://www.w3.org/2006/time#DateTimeInterval" );
    
    /** <p>The day of week</p> */
    public static final OntClass DayOfWeek = M_MODEL.createClass( "http://www.w3.org/2006/time#DayOfWeek" );
    
    /** <p>Duration of a temporal extent expressed as a number scaled by a temporal unit</p> */
    public static final OntClass Duration = M_MODEL.createClass( "http://www.w3.org/2006/time#Duration" );
    
    /** <p>Description of temporal extent structured with separate values for the various 
     *  elements of a calendar-clock system. The temporal reference system is fixed 
     *  to Gregorian Calendar, and the range of each of the numeric properties is 
     *  restricted to xsd:decimal</p>
     */
    public static final OntClass DurationDescription = M_MODEL.createClass( "http://www.w3.org/2006/time#DurationDescription" );
    
    /** <p>Description of date and time structured with separate values for the various 
     *  elements of a calendar-clock system</p>
     */
    public static final OntClass GeneralDateTimeDescription = M_MODEL.createClass( "http://www.w3.org/2006/time#GeneralDateTimeDescription" );
    
    /** <p>Description of temporal extent structured with separate values for the various 
     *  elements of a calendar-clock system.</p>
     */
    public static final OntClass GeneralDurationDescription = M_MODEL.createClass( "http://www.w3.org/2006/time#GeneralDurationDescription" );
    
    /** <p>A temporal entity with zero extent or duration</p> */
    public static final OntClass Instant = M_MODEL.createClass( "http://www.w3.org/2006/time#Instant" );
    
    /** <p>A temporal entity with an extent or duration</p> */
    public static final OntClass Interval = M_MODEL.createClass( "http://www.w3.org/2006/time#Interval" );
    
    public static final OntClass January = M_MODEL.createClass( "http://www.w3.org/2006/time#January" );
    
    /** <p>The month of the year</p> */
    public static final OntClass MonthOfYear = M_MODEL.createClass( "http://www.w3.org/2006/time#MonthOfYear" );
    
    /** <p>A temporal entity with non-zero extent or duration, i.e. for which the value 
     *  of the beginning and end are different</p>
     */
    public static final OntClass ProperInterval = M_MODEL.createClass( "http://www.w3.org/2006/time#ProperInterval" );
    
    /** <p>A temporal reference system, such as a temporal coordinate system (with an 
     *  origin, direction, and scale), a calendar-clock combination, or a (possibly 
     *  hierarchical) ordinal system. This is a stub class, representing the set of 
     *  all temporal reference systems.</p>
     */
    public static final OntClass TRS = M_MODEL.createClass( "http://www.w3.org/2006/time#TRS" );
    
    /** <p>Time extent; duration of a time interval separate from its particular start 
     *  position</p>
     */
    public static final OntClass TemporalDuration = M_MODEL.createClass( "http://www.w3.org/2006/time#TemporalDuration" );
    
    /** <p>A temporal interval or instant.</p> */
    public static final OntClass TemporalEntity = M_MODEL.createClass( "http://www.w3.org/2006/time#TemporalEntity" );
    
    /** <p>A position on a time-line</p> */
    public static final OntClass TemporalPosition = M_MODEL.createClass( "http://www.w3.org/2006/time#TemporalPosition" );
    
    /** <p>A standard duration, which provides a scale factor for a time extent, or the 
     *  granularity or precision for a time position.</p>
     */
    public static final OntClass TemporalUnit = M_MODEL.createClass( "http://www.w3.org/2006/time#TemporalUnit" );
    
    /** <p>A temporal position described using either a (nominal) value from an ordinal 
     *  reference system, or a (numeric) value in a temporal coordinate system.</p>
     */
    public static final OntClass TimePosition = M_MODEL.createClass( "http://www.w3.org/2006/time#TimePosition" );
    
    /** <p>A Time Zone specifies the amount by which the local time is offset from UTC. 
     *  A time zone is usually denoted geographically (e.g. Australian Eastern Daylight 
     *  Time), with a constant value in a given region. The region where it applies 
     *  and the offset from UTC are specified by a locally recognised governing authority.</p>
     */
    public static final OntClass TimeZone = M_MODEL.createClass( "http://www.w3.org/2006/time#TimeZone" );
    
    /** <p>Year duration</p> */
    public static final OntClass Year = M_MODEL.createClass( "http://www.w3.org/2006/time#Year" );
    
    public static final Individual Friday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Friday", DayOfWeek );
    
    public static final Individual Monday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Monday", DayOfWeek );
    
    public static final Individual Saturday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Saturday", DayOfWeek );
    
    public static final Individual Sunday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Sunday", DayOfWeek );
    
    public static final Individual Thursday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Thursday", DayOfWeek );
    
    public static final Individual Tuesday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Tuesday", DayOfWeek );
    
    public static final Individual Wednesday = M_MODEL.createIndividual( "http://www.w3.org/2006/time#Wednesday", DayOfWeek );
    
    public static final Individual unitDay = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitDay", TemporalUnit );
    
    public static final Individual unitHour = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitHour", TemporalUnit );
    
    public static final Individual unitMinute = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitMinute", TemporalUnit );
    
    public static final Individual unitMonth = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitMonth", TemporalUnit );
    
    public static final Individual unitSecond = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitSecond", TemporalUnit );
    
    public static final Individual unitWeek = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitWeek", TemporalUnit );
    
    public static final Individual unitYear = M_MODEL.createIndividual( "http://www.w3.org/2006/time#unitYear", TemporalUnit );
    
    /** <p>Day of month - formulated as a text string with a pattern constraint to reproduce 
     *  the same lexical form as gDay, except that values up to 99 are permitted, 
     *  in order to support calendars with more than 31 days in a month. Note that 
     *  the value-space is not defined, so a generic OWL2 processor cannot compute 
     *  ordering relationships of values of this type.</p>
     */
    public static final Resource generalDay = M_MODEL.createResource( "http://www.w3.org/2006/time#generalDay" );
    
    /** <p>Month of year - formulated as a text string with a pattern constraint to reproduce 
     *  the same lexical form as gMonth, except that values up to 20 are permitted, 
     *  in order to support calendars with more than 12 months in the year. Note that 
     *  the value-space is not defined, so a generic OWL2 processor cannot compute 
     *  ordering relationships of values of this type.</p>
     */
    public static final Resource generalMonth = M_MODEL.createResource( "http://www.w3.org/2006/time#generalMonth" );
    
    /** <p>Year number - formulated as a text string with a pattern constraint to reproduce 
     *  the same lexical form as gYear, but not restricted to values from the Gregorian 
     *  calendar. Note that the value-space is not defined, so a generic OWL2 processor 
     *  cannot compute ordering relationships of values of this type.</p>
     */
    public static final Resource generalYear = M_MODEL.createResource( "http://www.w3.org/2006/time#generalYear" );
    
}
